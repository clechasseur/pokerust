name: CI

on: [ push ]

env:
  CI: 1

jobs:
  clippy:
    name: Clippy validation${{ matrix.all-features && ' with all features' || '' }}
    strategy:
      fail-fast: false
      matrix:
        all-features: [ false ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Install Rust with clippy
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: stable
          components: clippy
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v1-rust
          key: all-features-${{ matrix.all-features }}
          cache-on-failure: true

      - name: Run clippy
        uses: clechasseur/rs-clippy-check@a2a93bdcf05de7909aabd62eca762179ad3dbe50 # v3.0.5
        with:
          args: --workspace --all-targets ${{ matrix.all-features && '--all-features' || '' }} -- -D warnings

  fmt:
    name: Rustfmt check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Install Rust nightly with rustfmt
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: nightly
          components: rustfmt
          cache: false

      - name: Run Rustfmt
        uses: clechasseur/rs-fmt-check@1a4ebb722c8e8a04f0d2e363c91744f81c968c42 # v2.0.5
        with:
          args: --all

  msrv-check:
    name: MSRV check for Rust ${{ matrix.toolchain }} on ${{ matrix.os }}${{ matrix.all-features && ' with all features' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ 1.70.0 ]
        os: [ ubuntu ]
        all-features: [ false ]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Install Rust nightly and ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: nightly,${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v7-rust
          key: all-features-${{ matrix.all-features }}-msrv-pins-files-${{ hashFiles('**/msrv-pins.toml') }}
          cache-on-failure: true

      - name: Install required tools
        uses: taiki-e/install-action@ae888b48c8777229768754549e5463ba726cb1b3 # v2.44.1
        with:
          tool: just,cargo-hack,cargo-minimal-versions,cargo-msrv,cargo-msrv-prep
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Note: there's a problem where running `cargo msrv-prep` with a version of Rust
      # that's too old to resolve dependencies _before_ we apply the MSRV pins fails.
      # For now, we'll run `cargo msrv-prep` and `cargo msrv-unprep` using the Nightly
      # toolchain to work around the issue, but I'll have to think of a better way.
      - name: Run checks using cargo-minimal-versions
        run: |
          just toolchain=nightly prep
          just all_features=${{ matrix.all-features }} _check-minimal-only
          just _rimraf target-minimal
          just toolchain=nightly unprep

  build:
    name: Build for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }} on ${{ matrix.os }}${{ matrix.ignore-lock && ' without Cargo.lock' || '' }}${{ matrix.all-features && ' with all features' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ 1.75.0, stable, nightly ]
        os: [ ubuntu ]
        ignore-lock: [ false ]
        all-features: [ false ]
        include:
          - experimental: false
          - toolchain: nightly
            experimental: true
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Remove Cargo.lock
        if: ${{ matrix.ignore-lock }}
        run: rm Cargo.lock

      - name: Install Rust ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: ${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        if: ${{ !matrix.experimental }}
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          key: ignore-lock-${{ matrix.ignore-lock }}-all-features-${{ matrix.all-features }}
          cache-on-failure: true

      - name: Install just
        uses: taiki-e/install-action@ae888b48c8777229768754549e5463ba726cb1b3 # v2.44.1
        with:
          tool: just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Start DB containers
        uses: hoverkraft-tech/compose-action@802a148945af6399a338c7906c267331b39a71af # v2.0.0
        with:
          down-flags: "--volumes"

      - name: Run DB migrations
        uses: clechasseur/rs-cargo@060b7ed8caf4a0ae2a780a894042c22584a5451b # v2.0.3
        with:
          command: run
          args: --bin run_migrations

      - name: Run checks
        run: just all_features=${{ matrix.all-features }} check

      - name: Run tests
        run: just all_features=${{ matrix.all-features }} test

  tarpaulin:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: stable
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@ae888b48c8777229768754549e5463ba726cb1b3 # v2.44.1
        with:
          tool: cargo-tarpaulin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Start DB containers
        uses: hoverkraft-tech/compose-action@802a148945af6399a338c7906c267331b39a71af # v2.0.0
        with:
          down-flags: "--volumes"

      - name: Run DB migrations
        uses: clechasseur/rs-cargo@060b7ed8caf4a0ae2a780a894042c22584a5451b # v2.0.3
        with:
          command: run
          args: --bin run_migrations

      - name: Run cargo-tarpaulin
        uses: clechasseur/rs-cargo@34eb9ee3e4186e5c7820a54393fbf081f78bc102 # v2.0.5
        with:
          command: tarpaulin

      - name: Upload code coverage results to codecov.io
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: code-coverage-report
          path: |
            cobertura.xml
            tarpaulin-report.html

  doc:
    name: Rustdoc check for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ stable, nightly ]
        include:
          - experimental: false
          - toolchain: nightly
            experimental: true
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Install Rust ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: ${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        if: ${{ !matrix.experimental }}
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Install just
        uses: taiki-e/install-action@ae888b48c8777229768754549e5463ba726cb1b3 # v2.44.1
        with:
          tool: just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate doc using rustdoc
        run: just doc

  publish-dry-run:
    name: Publish dry-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: stable
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Perform publish dry-run
        uses: clechasseur/rs-cargo@34eb9ee3e4186e5c7820a54393fbf081f78bc102 # v2.0.5
        with:
          command: publish
          args: --dry-run

  docker-image:
    name: Build Docker image for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ stable, nightly ]
        include:
          - experimental: false
          - toolchain: nightly
            experimental: true
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      - name: Build Docker image
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          target: final
          push: false
          tags: clechasseur/pokerust:ci
          build-args: RUST_TOOLCHAIN=${{ matrix.toolchain }}
          cache-from: ${{ matrix.experimental && 'type=inline' || 'type=gha' }}
          cache-to: ${{ matrix.experimental && 'type=inline' || 'type=gha,mode=max' }}
